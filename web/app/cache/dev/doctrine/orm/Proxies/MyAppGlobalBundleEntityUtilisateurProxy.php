<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class MyAppGlobalBundleEntityUtilisateurProxy extends \MyApp\GlobalBundle\Entity\Utilisateur implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function getSalt()
    {
        $this->__load();
        return parent::getSalt();
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function getRoles()
    {
        $this->__load();
        return parent::getRoles();
    }

    public function setRoles($role)
    {
        $this->__load();
        return parent::setRoles($role);
    }

    public function eraseCredentials()
    {
        $this->__load();
        return parent::eraseCredentials();
    }

    public function equals(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->__load();
        return parent::equals($user);
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function setSalt($salt)
    {
        $this->__load();
        return parent::setSalt($salt);
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setIsActive($isActive)
    {
        $this->__load();
        return parent::setIsActive($isActive);
    }

    public function getIsActive()
    {
        $this->__load();
        return parent::getIsActive();
    }

    public function setRole($role)
    {
        $this->__load();
        return parent::setRole($role);
    }

    public function getRole()
    {
        $this->__load();
        return parent::getRole();
    }

    public function setResetPassword($resetPassword)
    {
        $this->__load();
        return parent::setResetPassword($resetPassword);
    }

    public function getResetPassword()
    {
        $this->__load();
        return parent::getResetPassword();
    }

    public function setDateCreation($dateCreation)
    {
        $this->__load();
        return parent::setDateCreation($dateCreation);
    }

    public function getDateCreation()
    {
        $this->__load();
        return parent::getDateCreation();
    }

    public function setValiderPar($validerPar)
    {
        $this->__load();
        return parent::setValiderPar($validerPar);
    }

    public function getValiderPar()
    {
        $this->__load();
        return parent::getValiderPar();
    }

    public function setNom($nom)
    {
        $this->__load();
        return parent::setNom($nom);
    }

    public function getNom()
    {
        $this->__load();
        return parent::getNom();
    }

    public function setAdresse($adresse)
    {
        $this->__load();
        return parent::setAdresse($adresse);
    }

    public function getAdresse()
    {
        $this->__load();
        return parent::getAdresse();
    }

    public function setCodePostal($codePostal)
    {
        $this->__load();
        return parent::setCodePostal($codePostal);
    }

    public function getCodePostal()
    {
        $this->__load();
        return parent::getCodePostal();
    }

    public function setTelephone($telephone)
    {
        $this->__load();
        return parent::setTelephone($telephone);
    }

    public function getTelephone()
    {
        $this->__load();
        return parent::getTelephone();
    }

    public function setTelephonePoste($telephonePoste)
    {
        $this->__load();
        return parent::setTelephonePoste($telephonePoste);
    }

    public function getTelephonePoste()
    {
        $this->__load();
        return parent::getTelephonePoste();
    }

    public function setSansFrais($sansFrais)
    {
        $this->__load();
        return parent::setSansFrais($sansFrais);
    }

    public function getSansFrais()
    {
        $this->__load();
        return parent::getSansFrais();
    }

    public function setTelecopieur($telecopieur)
    {
        $this->__load();
        return parent::setTelecopieur($telecopieur);
    }

    public function getTelecopieur()
    {
        $this->__load();
        return parent::getTelecopieur();
    }

    public function setSiteweb($siteweb)
    {
        $this->__load();
        return parent::setSiteweb($siteweb);
    }

    public function getSiteweb()
    {
        $this->__load();
        return parent::getSiteweb();
    }

    public function setVilles(\MyApp\GlobalBundle\Entity\Villes $villes)
    {
        $this->__load();
        return parent::setVilles($villes);
    }

    public function getVilles()
    {
        $this->__load();
        return parent::getVilles();
    }

    public function addHebergements(\MyApp\GlobalBundle\Entity\Hebergements $hebergements)
    {
        $this->__load();
        return parent::addHebergements($hebergements);
    }

    public function getHebergements()
    {
        $this->__load();
        return parent::getHebergements();
    }

    public function addAttraits(\MyApp\GlobalBundle\Entity\Attraits $attraits)
    {
        $this->__load();
        return parent::addAttraits($attraits);
    }

    public function getAttraits()
    {
        $this->__load();
        return parent::getAttraits();
    }

    public function setHebergementExiste($hebergementExiste)
    {
        $this->__load();
        return parent::setHebergementExiste($hebergementExiste);
    }

    public function getHebergementExiste()
    {
        $this->__load();
        return parent::getHebergementExiste();
    }

    public function setAttraitExiste($attraitExiste)
    {
        $this->__load();
        return parent::setAttraitExiste($attraitExiste);
    }

    public function getAttraitExiste()
    {
        $this->__load();
        return parent::getAttraitExiste();
    }


    public function __sleep()
    {
        return array_merge(array('__isInitialized__'), parent::__sleep());
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}