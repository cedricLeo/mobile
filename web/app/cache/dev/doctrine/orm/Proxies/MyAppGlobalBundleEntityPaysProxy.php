<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class MyAppGlobalBundleEntityPaysProxy extends \MyApp\GlobalBundle\Entity\Pays implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getFullPicturePath()
    {
        $this->__load();
        return parent::getFullPicturePath();
    }

    public function uploadPicture()
    {
        $this->__load();
        return parent::uploadPicture();
    }

    public function movePicture()
    {
        $this->__load();
        return parent::movePicture();
    }

    public function removePicture()
    {
        $this->__load();
        return parent::removePicture();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setNomFr($nomFr)
    {
        $this->__load();
        return parent::setNomFr($nomFr);
    }

    public function getNomFr()
    {
        $this->__load();
        return parent::getNomFr();
    }

    public function setNomEn($nomEn)
    {
        $this->__load();
        return parent::setNomEn($nomEn);
    }

    public function getNomEn()
    {
        $this->__load();
        return parent::getNomEn();
    }

    public function setReservitId($reservitId)
    {
        $this->__load();
        return parent::setReservitId($reservitId);
    }

    public function getReservitId()
    {
        $this->__load();
        return parent::getReservitId();
    }

    public function addProvinces_etats(\MyApp\GlobalBundle\Entity\Provinces_etats $provincesId)
    {
        $this->__load();
        return parent::addProvinces_etats($provincesId);
    }

    public function getProvincesId()
    {
        $this->__load();
        return parent::getProvincesId();
    }

    public function setFlag($flag)
    {
        $this->__load();
        return parent::setFlag($flag);
    }

    public function getFlag()
    {
        $this->__load();
        return parent::getFlag();
    }

    public function setImageDoctrine($imageDoctrine)
    {
        $this->__load();
        return parent::setImageDoctrine($imageDoctrine);
    }

    public function getImageDoctrine()
    {
        $this->__load();
        return parent::getImageDoctrine();
    }

    public function setAffiche($affiche)
    {
        $this->__load();
        return parent::setAffiche($affiche);
    }

    public function getAffiche()
    {
        $this->__load();
        return parent::getAffiche();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'nom_fr', 'nom_en', 'reservit_id', 'affiche', 'flag', 'image_doctrine', 'provinces_id');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}